@inproceedings{sdsl,
  title     = {From Theory to Practice: Plug and Play with Succinct Data Structures},
  author    = {Gog, Simon and Beller, Timo and Moffat, Alistair and Petri, Matthias},
  booktitle = {13th International Symposium on Experimental Algorithms, (SEA 2014)},
  year      = {2014},
  pages     = {326-337},
  ee        = {http://dx.doi.org/10.1007/978-3-319-07959-2_28}
}

@article{slpsurvey,
  title={Algorithmics on SLP-compressed strings: A survey},
  author={Lohrey, Markus},
  journal={Groups-Complexity-Cryptology},
  volume={4},
  number={2},
  pages={241--299},
  year={2012},
  publisher={Walter de Gruyter GmbH}
}

@inproceedings{slpgagie,
  title={Practical random access to SLP-compressed texts},
  author={Gagie, Travis and Manzini, Giovanni and Navarro, Gonzalo and Sakamoto, Hiroshi and Seelbach Benkner, Louisa and Takabatake, Yoshimasa and others},
  booktitle={International Symposium on String Processing and Information Retrieval},
  pages={221--231},
  year={2020},
  organization={Springer}
}

@article{sa,
  title={Suffix arrays: a new method for on-line string searches},
  author={Manber, Udi and Myers, Gene},
  journal={siam Journal on Computing},
  volume={22},
  number={5},
  pages={935--948},
  year={1993},
  publisher={SIAM}
}


@article{bwt,
	title        = {A block-sorting lossless data compression algorithm},
	author       = {Burrows, Michael and Wheeler, David},
	year         = 1994,
	booktitle    = {Digital SRC Research Report},
	organization = {Citeseer}
}

@inbook{gusfield_1997,
	title        = {Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology},
	author       = {Gusfield, Dan},
	year         = 1997,
	booktitle    = {Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology},
	publisher    = {Cambridge University Press},
	place        = {Cambridge}
}

@misc{durbin_gh,
  author = {Durbin, Richard},
  title = {{PBWT}},
  year = {2014},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/richarddurbin/pbwt}},
  commit = {0de8d02df1b77146ded81e9e196991fdab520767}
}

@misc{macs,
  author = {Chen, Gary K.},
  title = {{MaCS}},
  year = {2019},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/gchen98/macs}},
  commit = {85b0475231fb32dab70e7ae0c81b0603151b4da7}
}

@article{wiuf,
  title={Recombination as a point process along sequences},
  author={Wiuf, Carsten and Hein, Jotun},
  journal={Theoretical population biology},
  volume={55},
  number={3},
  pages={248--259},
  year={1999},
  publisher={Elsevier}
}

@misc{shapedslp,
  author = {Tomohiro, I.},
  title = {{ShapedSlp}},
  year = {2020},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/itomomoti/ShapedSlp}},
  commit = {2a2fcaf0ea4fcd4f88a8e7c61d4c63c697b12508}
}

@misc{bigrepair,
  author = {Manzini, Giovanni},
  title = {{BigRePair}},
  year = {2019},
  publisher = {GitLab},
  journal = {GitHub repository},
  howpublished = {\url{https://gitlab.com/manzai/bigrepair}},
  commit = {17758cf3cacb1080bd8ea81b81d3754ada289846}
}

@inproceedings{rpair,
  title={Rpair: rescaling repair with rsync},
  author={Gagie, Travis and Manzini, Giovanni and Navarro, Gonzalo and Sakamoto, Hiroshi and Takabatake, Yoshimasa and others},
  booktitle={International Symposium on String Processing and Information Retrieval},
  pages={35--44},
  year={2019},
  organization={Springer}
}
@article{pbwt,
	title        = {Efficient haplotype matching and storage using the positional Burrows–Wheeler transform (PBWT)},
	author       = {Durbin, Richard},
	year         = 2014,
	month        = {01},
	journal      = {Bioinformatics},
	volume       = 30,
	number       = 9,
	pages        = {1266--1272},
	doi          = {10.1093/bioinformatics/btu014},
	issn         = {1367-4803},
	url          = {https://doi.org/10.1093/bioinformatics/btu014},
	abstract     = {Motivation: Over the last few years, methods based on suffix arrays using the Burrows–Wheeler Transform have been widely used for DNA sequence read matching and assembly. These provide very fast search algorithms, linear in the search pattern size, on a highly compressible representation of the dataset being searched. Meanwhile, algorithmic development for genotype data has concentrated on statistical methods for phasing and imputation, based on probabilistic matching to hidden Markov model representations of the reference data, which while powerful are much less computationally efficient. Here a theory of haplotype matching using suffix array ideas is developed, which should scale too much larger datasets than those currently handled by genotype algorithms.Results: Given M sequences with N bi-allelic variable sites, an O(NM) algorithm to derive a representation of the data based on positional prefix arrays is given, which is termed the positional Burrows–Wheeler transform (PBWT). On large datasets this compresses with run-length encoding by more than a factor of a hundred smaller than using gzip on the raw data. Using this representation a method is given to find all maximal haplotype matches within the set in O(NM) time rather than O(NM2) as expected from naive pairwise comparison, and also a fast algorithm, empirically independent of M given sufficient memory for indexes, to find maximal matches between a new sequence and the set. The discussion includes some proposals about how these approaches could be used for imputation and phasing.Availability:http://github.com/richarddurbin/pbwtContact:richard.durbin@sanger.ac.uk},
	eprint       = {https://academic.oup.com/bioinformatics/article-pdf/30/9/1266/647197/btu014.pdf}
}

@article{dpbwt,
    author = {Sanaullah, Ahsan and Zhi, Degui and Zhang, Shaojie},
    title = "{d-PBWT: dynamic positional Burrows–Wheeler transform}",
    journal = {Bioinformatics},
    volume = {37},
    number = {16},
    pages = {2390-2397},
    year = {2021},
    month = {02},
    abstract = "{Durbin’s positional Burrows–Wheeler transform (PBWT) is a scalable data structure for haplotype matching. It has been successfully applied to identical by descent (IBD) segment identification and genotype imputation. Once the PBWT of a haplotype panel is constructed, it supports efficient retrieval of all shared long segments among all individuals (long matches) and efficient query between an external haplotype and the panel. However, the standard PBWT is an array-based static data structure and does not support dynamic updates of the panel.Here, we generalize the static PBWT to a dynamic data structure, d-PBWT, where the reverse prefix sorting at each position is stored with linked lists. We also developed efficient algorithms for insertion and deletion of individual haplotypes. In addition, we verified that d-PBWT can support all algorithms of PBWT. In doing so, we systematically investigated variations of set maximal match and long match query algorithms: while they all have average case time complexity independent of database size, they have different worst case complexities and dependencies on additional data structures.The benchmarking code is available at genome.ucf.edu/d-PBWT.Supplementary data are available at Bioinformatics online.}",
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/btab117},
    url = {https://doi.org/10.1093/bioinformatics/btab117},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/37/16/2390/39947158/btab117.pdf},
}


